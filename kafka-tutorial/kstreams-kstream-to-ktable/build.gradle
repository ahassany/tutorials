buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.22.0"
    }
}


plugins {
    id 'java'
    id 'ps.hassany.kafka.tutorial.java-application-conventions'
}

version 'unspecified'


repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven"
    }
}

dependencies {
    implementation project(":common")
    implementation project(":producer")
    implementation "org.apache.avro:avro:1.10.1"
    implementation "org.slf4j:slf4j-simple:1.7.30"
    implementation "org.apache.kafka:kafka-streams:2.7.0"
    implementation "io.confluent:kafka-streams-avro-serde:6.1.0"
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
    testImplementation "org.apache.kafka:kafka-streams-test-utils:2.7.0"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

task createTopics(type: JavaExec) {
    main = 'ps.hassany.kafka.tutorial.kstreams.kstreamktable.helpers.CreateTopics'
    classpath = sourceSets.main.runtimeClasspath
}

task publishSchemas(type: JavaExec) {
    main = 'ps.hassany.kafka.tutorial.kstreams.kstreamktable.helpers.RegisterSchemas'
    classpath = sourceSets.main.runtimeClasspath
}

task produceMessages(type: JavaExec) {
    main = 'ps.hassany.kafka.tutorial.kstreams.kstreamktable.helpers.ProduceMessages'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn = [createTopics, publishSchemas]
}

application {
    // Define the main class for the application.
    mainClass = 'ps.hassany.kafka.tutorial.kstreams.kstreamktable.KStreamToKTableApplication'
}

run.dependsOn {
    [createTopics, publishSchemas]
}
